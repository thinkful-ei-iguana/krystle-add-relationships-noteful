{"ast":null,"code":"import _classCallCheck from \"/Users/krystlenoweski/Krystle-Sophia-NoteFul/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/krystlenoweski/Krystle-Sophia-NoteFul/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/krystlenoweski/Krystle-Sophia-NoteFul/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/krystlenoweski/Krystle-Sophia-NoteFul/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/krystlenoweski/Krystle-Sophia-NoteFul/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/krystlenoweski/Krystle-Sophia-NoteFul/src/notesForm.js\";\nimport React from 'react';\nimport config from './config';\nimport ApiContext from './ApiContext';\n\nvar NotesForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(NotesForm, _React$Component);\n\n  function NotesForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, NotesForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(NotesForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      noteName: {\n        value: '',\n        touched: false\n      },\n      noteDescription: {\n        value: '',\n        touched: false\n      },\n      folders: _this.context.folders\n    };\n\n    _this.setNoteName = function (noteName) {\n      _this.setState({\n        noteName: {\n          value: noteName,\n          touched: true\n        }\n      });\n    };\n\n    _this.setNoteDescription = function (noteDescription) {\n      _this.setState({\n        noteDescription: {\n          value: noteDescription,\n          touched: true\n        }\n      });\n    };\n\n    _this.validateNoteName = function () {\n      var noteName = _this.state.noteName.value.trim();\n\n      if (noteName === 0) {\n        return \"Note Name is required\";\n      } else if (noteName.length < 1 || noteName.length > 12) {\n        return 'Note Name must between 1 and 12 characters long';\n      }\n    };\n\n    _this.validateNoteDescription = function () {\n      var noteDescription = _this.state.noteDescription.value.trim();\n\n      if (noteDescription === 0) {\n        return \"Note Description is required\";\n      } else if (noteDescription.length < 6 || noteDescription.length > 72) {\n        return 'Note Description must between 6 and 72 characters long';\n      }\n    };\n\n    _this.addNote = function () {\n      var noteName = _this.state.noteName.value.trim();\n\n      var noteDescription = _this.state.noteDescription.value();\n\n      fetch(\"\".concat(config.API_ENDPOINT, \"/notes\"), {\n        method: 'POST',\n        headers: new Headers({\n          'Content-Type': 'application/json'\n        }),\n        body: noteName\n      }).then(function (res) {\n        if (!res.ok) return res.json().then(function (e) {\n          return Promise.reject(e);\n        });\n        return res.json();\n      }).then(function (res) {\n        _this.context.addNote(res);\n      }).catch(function (error) {\n        console.error({\n          error: error\n        });\n      });\n    };\n\n    _this.folderOptions = _this.state.folders.map(function (folder) {\n      return React.createElement(\"option\", {\n        value: \"{folder.name}\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, folder.name);\n    });\n    return _this;\n  }\n\n  _createClass(NotesForm, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"note-name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Note Name\", this.state.noteName.touched && React.createElement(\"p\", {\n        className: \"error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, this.validateNoteName())), React.createElement(\"input\", {\n        id: \"note-name\",\n        type: \"text\",\n        value: this.state.noteName.value,\n        onChange: function onChange(e) {\n          return _this2.setNoteName(e.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"note-description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"Note Description\", this.state.noteDescription.touched && React.createElement(\"p\", {\n        className: \"error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, this.validateNoteDescription())), React.createElement(\"input\", {\n        id: \"note-description\",\n        type: \"text\",\n        value: this.state.noteDescription.value,\n        onChange: function onChange(e) {\n          return _this2.setNoteDescription(e.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }), React.createElement(\"select\", {\n        name: \"folders\",\n        id: \"folder-select\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \"Choose a Folder\"), this.folderOptions), React.createElement(\"button\", {\n        disabled: this.validateNoteName() || this.validateNoteDescription(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"Submit Note\"));\n    }\n  }]);\n\n  return NotesForm;\n}(React.Component);\n\nNotesForm.contextType = ApiContext;\nexport { NotesForm as default };","map":{"version":3,"sources":["/Users/krystlenoweski/Krystle-Sophia-NoteFul/src/notesForm.js"],"names":["React","config","ApiContext","NotesForm","state","noteName","value","touched","noteDescription","folders","context","setNoteName","setState","setNoteDescription","validateNoteName","trim","length","validateNoteDescription","addNote","fetch","API_ENDPOINT","method","headers","Headers","body","then","res","ok","json","e","Promise","reject","catch","error","console","folderOptions","map","folder","name","target","Component","contextType"],"mappings":"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","sourcesContent":["import React from 'react';\nimport config from './config'\nimport ApiContext from './ApiContext'\n\nexport default class NotesForm extends React.Component {\n    static contextType = ApiContext;\n\n    state = {\n        noteName: { value: '', touched: false },\n        noteDescription: { value: '', touched: false },\n        folders: this.context.folders\n    };\n\n    setNoteName = noteName => {\n        this.setState({ noteName: { value: noteName, touched: true } });\n    };\n\n    setNoteDescription = noteDescription => {\n        this.setState({ noteDescription: { value: noteDescription, touched: true } });\n    };\n\n\n    validateNoteName = () => {\n        let noteName = this.state.noteName.value.trim();\n        if (noteName === 0) {\n            return \"Note Name is required\"\n        }\n        else if (noteName.length < 1 || noteName.length > 12) {\n            return 'Note Name must between 1 and 12 characters long'\n        }\n    }\n\n    validateNoteDescription = () => {\n        let noteDescription = this.state.noteDescription.value.trim();\n        if (noteDescription === 0) {\n            return \"Note Description is required\"\n        }\n        else if (noteDescription.length < 6 || noteDescription.length > 72) {\n            return 'Note Description must between 6 and 72 characters long'\n        }\n    }\n\n    addNote = () => {\n        let noteName = this.state.noteName.value.trim();\n        let noteDescription = this.state.noteDescription.value();\n        fetch(`${config.API_ENDPOINT}/notes`,\n            {\n                method: 'POST',\n                headers: new Headers({\n                    'Content-Type': 'application/json'\n                }),\n                body: noteName,\n            })\n            .then(res => {\n                if (!res.ok)\n                  return res.json().then(e => Promise.reject(e))\n                return res.json()\n              })\n              .then((res) => {\n                this.context.addNote(res)\n            \n              })\n\n              .catch(error => {\n                console.error({ error })\n              })\n          }\n        \n\n    folderOptions = this.state.folders.map(function(folder){\n        return (\n            <option value=\"{folder.name}\">{folder.name}</option>\n        )\n    })\n\n\n    render() {\n        return (\n            <form>\n                <label htmlFor=\"note-name\">Note Name\n                {this.state.noteName.touched &&\n                        <p className=\"error\">{this.validateNoteName()}</p>}\n                </label>\n                <input id=\"note-name\" type=\"text\" value={this.state.noteName.value}\n                    onChange={e => this.setNoteName(e.target.value)} />\n\n                <label htmlFor=\"note-description\">Note Description\n                {this.state.noteDescription.touched &&\n                        <p className=\"error\">{this.validateNoteDescription()}</p>}\n                </label>\n                <input id=\"note-description\" type=\"text\" value={this.state.noteDescription.value}\n                    onChange={e => this.setNoteDescription(e.target.value)} />\n                <select name=\"folders\" id=\"folder-select\">\n                    <option value=\"\">Choose a Folder</option>\n                    {this.folderOptions}\n                </select>\n                <button disabled={\n                    this.validateNoteName() ||\n                    this.validateNoteDescription()\n                }>Submit Note</button>\n            </form>\n        )\n    }\n\n}"]},"metadata":{},"sourceType":"module"}